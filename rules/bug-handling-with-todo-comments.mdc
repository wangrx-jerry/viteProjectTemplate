---
description: 使用 TODO 注释处理代码中的问题和 bug
globs: ["*.js", "*.ts", "*.vue"]
alwaysApply: true
---

# 使用 TODO 注释处理 Bug

在开发过程中，当发现代码问题但无法立即解决时，应使用规范化的 TODO 注释进行标记。

## TODO 注释规范

TODO 注释应遵循以下格式：

```javascript
// TODO: [问题描述] - [可选：预期解决日期或版本] - [创建者]
```

例如：

```javascript
// TODO: 修复在移动设备上表单验证失败的问题 - v2.0 - jerry
```

## 应用场景

1. **发现现有代码中的 bug**：
   ```javascript
   // TODO: 此处在并发请求时可能导致数据不一致 - 需要添加锁机制
   ```

2. **识别优化机会**：
   ```javascript
   // TODO: 此函数可以被拆分为更小的函数以提高可测试性
   ```

3. **标记潜在的技术债务**：
   ```javascript
   // TODO: 重构此部分以使用新的 API，当前方法将在下一版本弃用
   ```

4. **记录临时解决方案**：
   ```javascript
   // TODO: 这是临时解决方案，需要在后续版本中实现更优雅的处理方式
   ```

## 最佳实践

1. **具体明确**：TODO 注释应清晰描述问题和需要采取的行动
2. **避免过多**：不要让代码中充斥着大量 TODO 注释
3. **定期检查**：建立定期审查和处理 TODO 注释的机制
4. **区分优先级**：对于重要的 TODO，考虑添加优先级指示：
   ```javascript
   // TODO(高): 这是一个需要尽快修复的关键问题
   ```

## 与最小代码变更原则的结合

当在完成特定任务时发现不相关的代码问题时：
1. 添加 TODO 注释标记问题
2. 不要立即修复（遵循最小代码变更原则）
3. 在适当的时机单独处理这些问题

## 项目管理集成

考虑使用工具自动从代码中提取 TODO 注释，创建跟踪任务：
- 使用 VS Code 的 TODO Tree 扩展
- 配置 ESLint 规则检查 TODO 注释格式
- 将 TODO 与项目管理工具（如 JIRA、Github Issues）集成