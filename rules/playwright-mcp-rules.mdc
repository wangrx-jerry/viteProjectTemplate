---
description: 
globs: 
alwaysApply: false
---
# Playwright MCP 规则

**规则名称**：Playwright MCP 规则
**适用范围**：Playwright 自动化测试、MCP 相关任务
**简要描述**：本规则用于指导 Playwright MCP 相关自动化任务的角色行为、交互方式、数据安全与输出要求，确保测试过程的规范性和可追溯性。

---
## 任务准确性
- 执行任务前，先复述我的任务，让我确认你理解我的指令
- 整理出我需要你填写的信息

## 1. 控制衍生
> 仅根据任务明确需求进行操作，确保自动化行为精准、无冗余。
- 只填写任务中的明确需求，不添加任何额外内容。
- 仅匹配任务中指定的具体值，无法匹配时应判定为失败并记录。
- 禁止自行扩展任务范围，严格按照指定的步骤执行。
- 对于模糊不清的指令，应请求用户明确而非自行假设。
- 未指定的必填信息不要自动填写

## 2. 交互
> 针对下拉选择等交互场景，优先直接匹配目标项，无法直接匹配时尝试搜索。
- 下拉选择时，若无法直接匹配目标项目，应尝试使用下拉搜索功能。
- 若下拉搜索后仍无法匹配目标项目，则判定为匹配失败，并记录原因。
- 对于需要点击的元素，优先使用可访问性选择器，其次是文本内容，最后才是CSS选择器。
- 表单填写应先检查字段约束（如必填、格式要求），再进行输入，避免提交时出错。
- 对于需要等待的操作，使用明确的等待条件（如元素可见、网络请求完成），避免使用固定时间等待。

## 3. 数据安全
> 涉及数据提交的操作，需确保用户知情并确认，防止误操作。
- 所有涉及数据提交的操作，必须在获得用户确认后方可执行。
- 未经确认的数据提交请求一律不予执行，并输出提示。
- 敏感信息（如密码、令牌）不应出现在日志或截图中。
- 对于涉及敏感操作的测试（如删除、批量修改），应先明确提示操作风险。
- 测试结束后应清理测试数据，避免污染生产环境。

## 4. 异常处理
> 自动化过程中的异常需要被妥善捕获、记录并反馈，以便快速定位和解决问题。
- 对页面操作时应设置适当的超时时间，并捕获超时异常。
- 网络请求失败时，应记录响应状态码和错误信息。
- 当元素定位失败时，应截图并记录当前页面状态。
- 对于意外的弹窗或提示，应有相应的处理策略。
- 测试过程中断时，应保存当前状态以便后续分析。

## 5. 性能考量
> 编写高效的测试脚本，避免不必要的等待和操作。
- 使用有效的选择器策略，避免复杂的CSS选择器和XPath。
- 合理设置等待时间，优先使用条件等待而非固定时间等待。
- 对于重复的操作，应封装为可复用的函数。
- 减少不必要的截图和日志记录，仅在关键点记录。
- 考虑使用并行测试提高效率，但需避免测试间的相互干扰。

## 6. 输出
> 任务执行结束后，需清晰输出执行结果，便于追踪和复盘。
- 执行成功后，输出所有成功的项目列表。
- 执行失败时，输出失败的项目及对应失败原因。
- 建议输出格式：
  ```json
  {
    "success": ["项目A", "项目B"],
    "failed": [{ "name": "项目C", "reason": "未匹配到目标值" }],
    "metrics": {
      "totalTime": "120s",
      "stepCount": 15
    }
  }
  ```
- 所有输出应简明、结构化，便于自动化工具解析和人工查阅。
- 关键操作步骤应有明确的日志记录，包含时间戳和操作描述。
- 对于复杂流程，应提供步骤摘要和整体执行时间。

## 7. 执行要求
- 直接使用 cursor mcp 执行任务，不用尝试安装外部依赖


