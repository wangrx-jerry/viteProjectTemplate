---
description: Vue 3 和 JavaScript/TypeScript 代码质量规则索引
globs: ["*.vue", "*.js", "*.ts"]
alwaysApply: false
---

# 项目代码规则索引

本项目包含以下代码规则文件，指导开发过程中的最佳实践和编码规范。

## 综合规则文件

- [`cursorrules.mdc`](mdc:cursorrules.mdc) - 主要规则文件，包含 Vue 3 选项式 API 和 JavaScript/TypeScript 代码质量基本规则

## 代码风格与组织

### 代码变更

- [`minimal-code-changes-rule.mdc`](mdc:minimal-code-changes-rule.mdc) - 最小代码变更原则，如何安全地修改代码

### 函数和条件表达式

- [`function-ordering-conventions.mdc`](mdc:function-ordering-conventions.mdc) - 函数排序约定，如何组织代码中的函数顺序
- [`early-returns-and-conditionals.mdc`](mdc:early-returns-and-conditionals.mdc) - 早期返回和条件表达式的最佳实践

### 命名和代码组织

- [`naming-and-constants.mdc`](mdc:naming-and-constants.mdc) - 命名约定和常量使用的最佳实践

### Bug 处理

- [`bug-handling-with-todo-comments.mdc`](mdc:bug-handling-with-todo-comments.mdc) - 使用 TODO 注释处理代码中的问题和 bug

## 规则适用范围

这些规则共同适用于项目中的 Vue、JavaScript、markdown 和 TypeScript 文件。每个规则文件的元数据部分指定了具体的适用范围。

## 如何使用这些规则

1. 在开发新功能或修改现有代码时，请先阅读相关规则
2. 使用这些规则指导代码审查过程
3. 将这些规则整合到持续集成流程中
4. 定期回顾并讨论规则的有效性，必要时进行调整

## 规则优先级

当不同规则之间存在冲突时，按以下优先级处理：

1. 确保代码功能正确无误
2. 遵循最小代码变更原则（对现有代码的修改）
3. 遵循命名约定和代码组织规则（对新代码的编写）
4. 其他规则

## 从组合式 API 到选项式 API

本项目使用 Vue 3 选项式 API 进行开发。如果您熟悉组合式 API，请注意以下主要区别：

1. 使用 `data()`, `methods`, `computed` 等选项组织代码，而非 `setup()` 函数
2. 使用 `this` 访问组件实例，而非直接使用响应式变量
3. 生命周期钩子作为选项直接使用，如 `mounted()` 而非 `onMounted()`

